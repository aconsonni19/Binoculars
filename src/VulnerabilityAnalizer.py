import angr
import claripy

class VulnerabilityAnalyzer:
    def __init__(self, binary_path: str):
        # Tag for debugging purposes
        self.TAG = "[VulnerabilityAnalyzer]: "
        # Initialize the angr project without external libraries
        self.project = angr.Project(binary_path, auto_load_libs=False)
        # Initialize th CFG
        self.CFG = self.project.analyses.CFGFast(fail_fast=True)
            
    def __is_pc_hyjacked(self, state: angr.SimState):
        # Get the instruction pointer register of the current state
        ip = state.regs.ip
        # Create a junk address
        target_junk_addr = b"A" * (ip.size() // 8)
        # Check if the program counter can point to the junk address
        if state.satisfiable(extra_constraints = [ip == target_junk_addr]):
            state.add_constraints(ip == target_junk_addr)
            if state.satisfiable():
                print(self.TAG + "FOUND USER INPUT CONTROLLABLE PROGRAM COUNTER! POSSIBLE BUFFER OVERFLOW!")
                return True
        return False     

        
    def analyze_buffer_overflows(self, input_bits: int):
        # Create a symbolic input of byte lenght input_len:
        sym_input = claripy.BVS("sym_input", input_bits * 8)
        # Get a state from the entry point of the program
        state = self.project.factory.entry_state(stdin = sym_input)
        # Get a simulation manager:
        simgr = self.project.factory.simulation_manager(save_unconstrained = True)
            
        # Check for PC controllable by user input:
        simgr.explore(find = self.__is_pc_hyjacked)
        
        for s in simgr.unconstrained:
            self.__is_pc_hyjacked(s)
        
                
        
        
        #if simgr.unconstrained:
        #    for s in simgr.unconstrained:
        #        s.add_constraints(s.regs.pc == b"AAA") 
        #       if(s.satisfiable()):
        #            print("Controllable program counter!, Potential buffer overflow detected!")
        

# Esegui l'analisi
v = VulnerabilityAnalyzer("/home/spitfire/Scrivania/University/Tesi/Binoculars/flaskr/tmp/primality_test")
v.analyze_buffer_overflows(20)
