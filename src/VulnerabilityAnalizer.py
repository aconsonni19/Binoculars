import angr
import claripy
import logging

class VulnerabilityAnalyzer:
    def __init__(self, binary_path: str):
        self.binary_path = binary_path
        # Load the binary and create the angr project without loading libc and other libraries which could slow
        # down the analysis
        self.project = angr.Project(binary_path, auto_load_libs = False)
        # Recovers the CFG 
        self.cfg = self.project.analyses.CFGFast()
        

    def find_vulnerable_functions(self):
        dangerous_functions = [
            'strcpy', 'strcat', 'sprintf', 'vsprintf', 'gets', 
            'scanf', 'fscanf', 'sscanf', 'strncpy', 'strncat'
        ]
        
        targets = []
        
        for function in self.cfg.kb.functions.values():
            if any(dangerous in function.name for dangerous in dangerous_functions):
                print(f"[!] Found risky function: {function.name} at {hex(function.addr)}")
                targets.append(function.addr)
        
        return targets
    
    def analyze_buffer_overflows(self, exploration_depth: int = 30):
        targets = self.find_vulnerable_functions()
                
        for addr in targets:
            state = self.project.factory.call_state(addr)
            simgr = self.project.factory.simgr(state)
            
            simgr.explore(n = exploration_depth)
            
            
            for found in simgr.found:
                state = found
                
                print(state)
                
                if state.solver.eval(state.regs.sp != state.regs.bp):
                    print(f"[!] Stack pointer mismatch at {hex(addr)} — possible overflow!")

                for action in state.history.recent_actions:
                    if action.type == "mem" and action.action == "write" and action.addr.symbolic:
                        print(f"[!] Symbolic memory write detected at {hex(addr)} — risky write!")
                

v = VulnerabilityAnalyzer("/home/spitfire/Scrivania/University/Tesi/Binoculars/flaskr/tmp/primality_test")

v.analyze_buffer_overflows(30)
    
    
        
        
        
        